@using Sdcb.PictureSpeaks.Services.DB
@using Sdcb.PictureSpeaks.Services.Idioms
@inject IdiomService idiomService;
@{
    ViewData["Title"] = "大厅";
}

<span>用户名：<!-- ko text: userName --><!-- /ko --></span>
<button data-bind="click: changeName" type="button">修改名字</button>
<hr />
<form method="post" action="/main/createLobby" style="display: inline-block">
    <label>成语：</label>
    <input type="hidden" data-bind="value: userName" name="user">
    <input data-bind="value: idiom" name="idiom">
    <button type="submit">启动词语："<!-- ko text: idiom --><!-- /ko -->"</button>
</form>
<form method="post" action="/main/createRandomLobby" style="display: inline-block">
    <input type="hidden" data-bind="value: userName" name="user">
    <button type="submit">给我个惊喜，玩随机成语</button>
</form>

<hr />
<label>房间列表：</label>

<table class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>ID</th>
            <th>创建者</th>
            <th>状态</th>
            <th>操作</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: lobbies">
        <tr>
            <td data-bind="text: id"></td>
            <td data-bind="text: createUser"></td>
            <td data-bind="lobbyStatus: lobbyStatus"></td>
            <td>
                <a data-bind="click: function() { $parent.redirect('/main/lobby/' + id()); }" href="javascript:void(0)">点击加入</a>
            </td>
        </tr>
    </tbody>
</table>

@section scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        var c = new signalR.HubConnectionBuilder().withUrl("/mainHub").build();

        class VM {
            requesting = ko.observable(false);
            src = ko.observable();
            userName = ko.observable(localStorage.getItem("userName") || randomName());
            idiom = ko.observable('@Html.Raw(idiomService.GetRandomIdiom().Word)');
            lobbies = ko.observableArray( @(Json.Serialize(ViewData["Lobbies"])).map(x => ko.mapping.fromJS(x)) );

            changeName() {
                this.userName(prompt("请输入新名字：") || randomName());
                localStorage.setItem("userName", this.userName());
            }

            loadLobbies() {
                $.get('/main/lobbies').then(data => {
                    this.lobbies(data.map(x => ko.mapping.fromJS(x)));
                });
            }

            redirect(url) {
                localStorage.setItem('userName', this.userName());
                location.href = url;
            }
        }

        const vm = new VM();
        vm.requesting(true);
        c.on('refreshLobby', () => vm.loadLobbies());
        c.on('onLobbyStatusChanged', (id, status) => {
            console.log(id, status);
            vm.lobbies().filter(x => x.id() === id)[0].lobbyStatus(status);
        });
        c.start();

        ko.applyBindings(vm);
    </script>
}